---
title: Sine function
format: html
filters:
  - shinylive
---


The plot below allows you to control parameters used in the sine function.
Experiment with the _period_, _amplitude_, and _phase shift_ to see how they affect the graph.

```{shinylive-r}
#| standalone: true
#| viewerHeight: 420

library(shiny)
library(janitor)  # For clean_names
library(dplyr)    # For data manipulation
library(ggplot2)  # For ggplot
library(ggforce)  # For ellipses

# Define UI for app to upload and analyze CSV file
ui <- fluidPage(
  titlePanel("Entropy Calculation"),
  sidebarLayout(
    sidebarPanel(
      fileInput("file1", "Choose CSV File", accept = ".csv"),
      numericInput("plat_x", "Platform X Position", value = 220),
      numericInput("plat_y", "Platform Y Position", value = 77),
      tags$hr(),
      actionButton("calc_entropy", "Calculate Entropy")
    ),
    mainPanel(
      tableOutput("entropy_table"),
      plotOutput("plot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  observeEvent(input$calc_entropy, {
    req(input$file1)

    data <- read.csv(input$file1$datapath)
    data <- janitor::clean_names(data)
    names(data)[1:3] <- c("time", "X", "Y")

    plat_x <- input$plat_x
    plat_y <- input$plat_y

    Xraw <- as.numeric(data$X)
    Yraw <- as.numeric(data$Y)

    d_x <- Xraw - plat_x
    d_y <- Yraw - plat_y
    dist2 <- d_x^2 + d_y^2
    w <- 1
    sw <- sum(w)
    xm <- mean(w * d_x) / sw
    ym <- mean(w * d_y) / sw
    xxm <- mean(w * d_x * d_x) / sw
    yym <- mean(w * d_y * d_y) / sw
    xym <- mean(w * d_x * d_y) / sw
    Sig <- matrix(c(xxm - xm^2, xym - xm * ym, xym - xm * ym, yym - ym^2), nrow=2)
    eig_val <- eigen(Sig)$values
    var_xy2 <- eig_val[1] * eig_val[2]
    mdist2 <- mean(w * dist2) / sw
    entropy <- log(mdist2) + 0.5 * log(var_xy2)
    entropy_data <- data.frame(Entropy = entropy)
    output$entropy_table <- renderTable(entropy_data)

    output$plot <- renderPlot({
      data_points <- data.frame(X = Xraw, Y = Yraw)
      p <- ggplot(data_points, aes(x = X, y = Y)) +
        geom_point() +
        geom_point(aes(x = plat_x, y = plat_y), color = "red", size = 3) +
        geom_text(aes(x = plat_x, y = plat_y, label = "Platform"), vjust = -1, color = "red") +
        geom_segment(aes(xend = plat_x, yend = plat_y), color = "blue") +
        ggforce::geom_ellipse(aes(x0 = plat_x, y0 = plat_y, a = sqrt(eig_val[1]), b = sqrt(eig_val[2]), angle = atan2(eig_vec[2,1], eig_vec[1,1])), fill = NA, color = "green") +
        geom_segment(aes(x = plat_x, y = plat_y, xend = plat_x + 10 * eig_vec[1,1] * sqrt(eig_val[1]), yend = plat_y + 10 * eig_vec[2,1] * sqrt(eig_val[1])), color = "purple") +
        geom_segment(aes(x = plat_x, y = plat_y, xend = plat_x + 10 * eig_vec[1,2] * sqrt(eig_val[2]), yend = plat_y + 10 * eig_vec[2,2] * sqrt(eig_val[2])), color = "purple") +
        xlim(min(Xraw) - 30, max(Xraw) + 30) +
        ylim(min(Yraw) - 30, max(Yraw) + 30) +
        labs(title = "Mouse Positions and Reference Point", x = "X", y = "Y")
      print(p)
    })
  })
}

# Create Shiny app
shinyApp(ui, server)


```

