---
title: Loading files in Shinylive apps in Quarto
format: html
filters:
  - shinylive
resources:
  - fruit_data.csv
---


The following application shows three different ways of adding files to a Shinylive app embedded in a Quarto document.

The first is a text file embedded in the code block, like this:

```{{shinylive-python}}
## file: fruit.csv
id,name,count
1,"apple",20
2,"orange",12
3,"grape",100
```

The second is a binary file embedded in the code block.

```{{shinylive-python}}
## file: fruit.pickle
## type: binary
gASVVAAAAAAAAABdlCh9lCiMAmlklEsEjARuYW1llIwEcGVhcpSMBWNvdW50lEsIdX2UKGgCSwVoA4wGYmFuYW5hlGgFSwZ1fZQoaAJLBmgDjARwbHVtlGgFSwt1ZS4=
```


The third is a text file that is deployed as part of the Quarto-generated website, and loaded via http request, by using `pyodide.http.pyfetch()`. Note that `pyodide.http.pyfetch()` will only work in Shinylive; a normal Shiny deployment will not have `pyodide` available. If you want to abstract the code so that you can use the same function in both normal Shiny and Shinylive, see the `get_url()` function in this [download demo app](https://shinylive.io/py/examples/#fetch-data-from-a-web-api).




